{"version":3,"file":"static/js/158.78b9369a.chunk.js","mappings":"kNAGe,SAASA,EAAT,GAIX,IAHFC,EAGC,EAHDA,SAGC,IAFDC,UAAAA,OAEC,MAFW,GAEX,EADDC,EACC,EADDA,aAEA,OACE,mBAAQD,UAAW,kBAAoBA,EAAWE,QAASD,EAA3D,SACGF,ICNP,IAGMI,EAAU,yCAAG,yGACcC,MAHjB,qCAEG,8BAC8BC,OAD9B,WACXC,EADW,QAEFC,QAFE,sBAEaC,MAAM,qCAFnB,gCAGVF,EAAUG,KAAKC,OAHL,2CAAH,qDAMD,SAASC,EAAT,GAAiE,IAAzCC,EAAwC,EAAxCA,mBAAoBC,EAAoB,EAApBA,iBACzD,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,GAAc,EAIlB,OAFAjB,IAAakB,MAAK,SAACX,GAAD,OAAYU,GAAeJ,EAAYN,MAElD,kBAAOU,GAAc,KAC3B,IAEH,IAAME,EAAeP,EAASQ,MAAM,EAAGN,GAAYO,KAAI,SAACC,EAAMC,GAC5D,OACE,oBAAQ1B,UAAU,sBAAlB,WACE,uBAAYA,UAAU,yBAAtB,SAAgDyB,EAAKE,QACrD,gBAAKC,IAAKH,EAAKI,IAAKC,IAAI,OAAO9B,UAAU,wBACzC,SAAC,EAAD,CACEA,UAAU,iCACVC,aAAc,kBAAMW,EAAmBa,IAFzC,iCAH2CC,MAajD,OACE,iBACE1B,UAAU,gBACV+B,SAAU,SAAmBC,GAvCH,MAwCpBf,IAGFe,EAAEC,OAAOC,aACTF,EAAEC,OAAOE,UACTH,EAAEC,OAAOG,wBAAwBC,OAEhB,KACjBnB,GAAc,SAACD,GACb,OAAIA,EAAa,EAjDG,IAkDXA,EAAa,EAlDF,SAqC5B,WAoBE,iBAAKjB,UAAU,wBAAf,WACE,eAAIA,UAAU,uBAAd,mCACA,mBACEA,UAAU,4BACVE,QAASW,EAFX,sBAQF,gBAAKb,UAAU,gCAAf,SACuB,IAApBe,EAASuB,OACRhB,GAEA,gBAAKtB,UAAU,yBAAf,UACE,iBAAKA,UAAU,aAAf,WACE,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA","sources":["components/GlowingButton/GlowingButton.js","components/PopularMemes/PopularMemes.js"],"sourcesContent":["import React from 'react';\r\nimport './GlowingButton.scss';\r\n\r\nexport default function GlowingButton({\r\n  children,\r\n  className = '',\r\n  clickHandler\r\n}) {\r\n  return (\r\n    <button className={'glowing-button ' + className} onClick={clickHandler}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport GlowingButton from '../GlowingButton/GlowingButton';\r\nimport './PopularMemes.scss';\r\n\r\nconst AMOUNT_OF_FETCHED_MEMES = 100;\r\nconst API_URL = 'https://api.imgflip.com/get_memes';\r\n\r\nconst fetchMemes = async () => {\r\n  const memesData = await (await fetch(API_URL)).json();\r\n  if (!memesData.success) throw Error(\"Couldn't access api.imgflip.com !\");\r\n  return memesData.data.memes;\r\n};\r\n\r\nexport default function PopularMemes({ chooseMemesHandler, closeMenuHandler }) {\r\n  const [memeData, setMemeData] = useState([]);\r\n  const [memeAmount, setMemeAmount] = useState(9);\r\n\r\n  useEffect(() => {\r\n    let isUnmounted = false;\r\n\r\n    fetchMemes().then((memes) => !isUnmounted && setMemeData(memes));\r\n\r\n    return () => (isUnmounted = true);\r\n  }, []);\r\n\r\n  const memeElements = memeData.slice(0, memeAmount).map((meme, index) => {\r\n    return (\r\n      <figure className=\"template-menu__meme\" key={index}>\r\n        <figcaption className=\"template-menu__caption\">{meme.name}</figcaption>\r\n        <img src={meme.url} alt=\"meme\" className=\"template-menu__img\" />\r\n        <GlowingButton\r\n          className=\"template-menu__choose-meme-btn\"\r\n          clickHandler={() => chooseMemesHandler(meme)}\r\n        >\r\n          USE THIS TEMPLATE\r\n        </GlowingButton>\r\n      </figure>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className=\"template-menu\"\r\n      onScroll={function loadMemes(e) {\r\n        if (memeAmount === AMOUNT_OF_FETCHED_MEMES) return;\r\n\r\n        const scrollBottom =\r\n          e.target.scrollHeight -\r\n          e.target.scrollTop -\r\n          e.target.getBoundingClientRect().height;\r\n\r\n        if (scrollBottom < 200) {\r\n          setMemeAmount((memeAmount) => {\r\n            if (memeAmount + 9 < AMOUNT_OF_FETCHED_MEMES) {\r\n              return memeAmount + 9;\r\n            }\r\n            return AMOUNT_OF_FETCHED_MEMES;\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"template-menu__header\">\r\n        <h2 className=\"template-menu__title\">Select meme template</h2>\r\n        <button\r\n          className=\"template-menu__close-menu\"\r\n          onClick={closeMenuHandler}\r\n        >\r\n          &times;\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"template-menu__meme-container\">\r\n        {memeData.length !== 0 ? (\r\n          memeElements\r\n        ) : (\r\n          <div className=\"template-menu__loading\">\r\n            <div className=\"lds-roller\">\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["GlowingButton","children","className","clickHandler","onClick","fetchMemes","fetch","json","memesData","success","Error","data","memes","PopularMemes","chooseMemesHandler","closeMenuHandler","useState","memeData","setMemeData","memeAmount","setMemeAmount","useEffect","isUnmounted","then","memeElements","slice","map","meme","index","name","src","url","alt","onScroll","e","target","scrollHeight","scrollTop","getBoundingClientRect","height","length"],"sourceRoot":""}